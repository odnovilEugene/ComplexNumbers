#pragma once

#include <iostream>

class RationalNumber { // класс рациональных чисел
 public:
  explicit RationalNumber(int numerator, int denominator=1) : numerator_(numerator), denominator_(denominator) {
    if (numerator_ > 0 && denominator_ < 0) {
      signOfNumber = -1;
    } else if (numerator_ < 0 && denominator_ < 0) {
      signOfNumber = 1;
    } else if (numerator_ < 0 && denominator_ > 0) {
      signOfNumber = -1;
    } else {
      signOfNumber = 1;
    }
  }
  RationalNumber(const RationalNumber& obj) = default;
  unsigned gcd(int a, int b) { // НОД
  if (a == b)
    return a;
  if (a > b)
    return gcd(a - b, b);
  return gcd(a, b - a);
  }
  unsigned lcm(int a, int b) { // НОК
    return (a * b) / gcd(a, b);
  }
  int RationalNumber::Sign();
  RationalNumber RationalNumber::operator+(const RationalNumber &number);
  RationalNumber RationalNumber::operator-(const RationalNumber &number);
  RationalNumber RationalNumber::operator*(const RationalNumber &number);
  RationalNumber RationalNumber::operator/(const RationalNumber &number);
  bool RationalNumber::operator==(const RationalNumber &number);
  bool RationalNumber::operator!=(const RationalNumber &number);
  RationalNumber RationalNumber::operator-();
  friend std::ostream& RationalNumber::operator<<(std::ostream &out, const RationalNumber &number);

 private:
  int numerator_;
  int denominator_;
  int signOfNumber;
};

class ComplexNumber { // класс комплексных чисел
 public:
  explicit ComplexNumber(RationalNumber firstNum, RationalNumber numI) : firstNum_(firstNum), numI_(numI) {}
  ComplexNumber(const ComplexNumber &number) = default;
  int ComplexNumber::Sign();
  ComplexNumber ComplexNumber::operator+(const ComplexNumber &number);
  ComplexNumber ComplexNumber::operator-(const ComplexNumber &number);
  ComplexNumber ComplexNumber::operator*(const ComplexNumber &number);
  ComplexNumber ComplexNumber::operator/(const ComplexNumber &number);
  ComplexNumber &ComplexNumber::operator=(const ComplexNumber &number);
  RationalNumber ComplexNumber::myPow(const RationalNumber &number, int a);
  bool ComplexNumber::operator==(const ComplexNumber &number);
  bool ComplexNumber::operator!=(const ComplexNumber &number);
  ComplexNumber &ComplexNumber::operator+=(const ComplexNumber &number);
  ComplexNumber &ComplexNumber::operator*=(const ComplexNumber &number);
  ComplexNumber &ComplexNumber::operator-=(const ComplexNumber &number);
  ComplexNumber &ComplexNumber::operator/=(const ComplexNumber &number);
  ComplexNumber &ComplexNumber::operator-();

 private:
  RationalNumber firstNum_;
  RationalNumber numI_;
  std::string signFirstNum_ = "+";
  std::string signNumI_ = "+";
};
